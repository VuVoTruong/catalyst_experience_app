basePath: 7788/
definitions:
  requests.LoginRequest:
    properties:
      email:
        example: user2@example.com
        type: string
      password:
        example: password1
        type: string
    required:
    - email
    - password
    type: object
  requests.RefreshRequest:
    properties:
      token:
        example: refresh_token
        type: string
    required:
    - token
    type: object
  requests.RegisterRequest:
    properties:
      email:
        example: user2@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password1
        type: string
    required:
    - email
    - name
    - password
    type: object
  requests.UpdateTokenRequest:
    properties:
      active:
        type: integer
      token:
        type: string
    required:
    - token
    type: object
  responses.Data:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  responses.Error:
    properties:
      code:
        type: integer
      error:
        type: string
    type: object
  responses.LoginResponse:
    properties:
      accessToken:
        type: string
      exp:
        type: integer
      refreshToken:
        type: string
    type: object
  responses.TokenResponse:
    properties:
      active:
        example: 1
        type: integer
      token:
        example: ABCXYZ
        type: string
    type: object
info:
  contact: {}
  title: Catalyst
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Perform user login
      operationId: user-login
      parameters:
      - description: User's credentials
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Authenticate a user
      tags:
      - User Actions
  /refresh:
    post:
      consumes:
      - application/json
      description: Perform refresh access token
      operationId: user-refresh
      parameters:
      - description: Refresh token
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Refresh access token
      tags:
      - User Actions
  /register:
    post:
      consumes:
      - application/json
      description: New user registration
      operationId: user-register
      parameters:
      - description: User's email, user's password
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Register
      tags:
      - User Actions
  /tokens:
    get:
      description: Get the list of all invitationTokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TokenResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get invitationTokens
      tags:
      - Tokens Actions
    post:
      consumes:
      - application/json
      description: Create token
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
      security:
      - ApiKeyAuth: []
      summary: Create token
      tags:
      - Tokens Actions
  /tokens/{token}:
    put:
      consumes:
      - application/json
      description: Update token
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      - description: Token body
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
      security:
      - ApiKeyAuth: []
      summary: Update token
      tags:
      - Tokens Actions
  /tokens/validate/{token}:
    post:
      consumes:
      - application/json
      description: Validate token
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Data'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
      security:
      - ApiKeyAuth: []
      summary: Validate token
      tags:
      - Tokens Actions
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
